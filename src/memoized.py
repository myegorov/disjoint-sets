 #!/usr/bin/env python3

"""
memoized.py

Recursive solution with memoization to longest common subsequence problem.

Usage:
    python3 naive.py
"""

__author__ = "Maksim Yegorov"
__date__ = "2016-03-25 Fri 09:53 PM"


# import cProfile
from generate_string import strgen


# def to_profile(func):
#     def profiled_func(*args, **kwargs):
#         profile = cProfile.Profile()
#         try:
#             profile.enable()
#             result = func(*args, **kwargs)
#             profile.disable()
#             return result
#         finally:
#             profile.print_stats()
#     return profiled_func


def lcs_memoized(seq1, seq2):
    """Calls helper function to calculate an LCS.

    Args:
        seq1 (string):  a random string sequence generated by generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
    Returns:
        LCS length (int)

    """
    len1 = len(seq1) - 1
    len2 = len(seq2) - 1

    # store length of LCS[i,j] in lcs_table
    lcs_table = [[None for i in range(len(seq2))] for j in range(len(seq1))]
    lcs_memoized_helper(seq1, seq2, len1, len2, lcs_table)
    return lcs_table[len1][len2]


# @to_profile
def lcs_memoized_helper(seq1, seq2, i, j, lcs_table):
    """Recursive solution with memoization to LCS problem. See CLRS ex. 15.4-3.

    Args:
        seq1 (string):  a string sequence generated by generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
        i (int):        index into seq1
        j (int):        index into seq2
        lcs_table (2D list):   a matrix of LCS length for [i, j] prefix
    Returns:
        lcs:    longest common subsequence (can be empty string)
    """

    if i < 0 or j < 0:
        return 0
    else:
        if lcs_table[i][j] is not None:
            return lcs_table[i][j]
        else:
            if seq1[i] == seq2[j]:
                val = 1 + \
                    lcs_memoized_helper(seq1, seq2, i-1, j-1, lcs_table)
                lcs_table[i][j] = val
                return val
            else:
                val = max(lcs_memoized_helper(seq1, seq2, i-1, j, lcs_table),
                        lcs_memoized_helper(seq1, seq2, i, j-1, lcs_table))
                lcs_table[i][j] = val
                return val


if __name__ == "__main__":
    """Tests and top-level logic go here."""

    sequence_1 = strgen(['a','b','c'], 100)
    sequence_2 = strgen(['a','b','c'], 100)
    print("seq1: %s" %sequence_1)
    print("seq2: %s" %sequence_2)

    lcs_length = lcs_memoized(sequence_1, sequence_2)
    print("LCS length: %d" %lcs_length)

