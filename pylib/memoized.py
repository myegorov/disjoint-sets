 #!/usr/bin/env python3

"""
memoized.py

Recursive solution with memoization to longest common subsequence problem.

Usage:
    python3 memoized.py

"""

__author__ = "Maksim Yegorov"
__date__ = "2016-04-07 Thu 12:53 AM"

from profilers import len_recursion, time_profiler, registry
from generate_string import strgen


@time_profiler(repeat=1)
def lcs_memoized(seq1, seq2):
    """Calls helper function to calculate an LCS.

    Args:
        seq1 (string):  a random string sequence generated by generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
    Returns:
        LCS length (int)

    """
    len1 = len(seq1)
    len2 = len(seq2)

    # store length of LCS[i,j] in lcs_table
    lcs_table = [[None for j in range(len2)] for i in range(len1)]
    _lcs_memoized(seq1, seq2, len1-1, len2-1, lcs_table)
    return lcs_table[len1-1][len2-1]

@len_recursion
def _lcs_memoized(seq1, seq2, i, j, lcs_table):
    """Recursive solution with memoization to LCS problem. See CLRS ex. 15.4-3.

    Args:
        seq1 (string):  a string sequence generated by generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
        i (int):        index into seq1
        j (int):        index into seq2
        lcs_table (2D list):   a matrix of LCS length for [i, j] prefix
    Returns:
        None:    modifies in place LCS length table
    """

    if i < 0 or j < 0:
        return 0
    else:
        if lcs_table[i][j] is not None:
            return lcs_table[i][j]
        else:
            if seq1[i] == seq2[j]:
                val = 1 + \
                    _lcs_memoized(seq1, seq2, i-1, j-1, lcs_table)
            else:
                val = max(_lcs_memoized(seq1, seq2, i-1, j, lcs_table),
                        _lcs_memoized(seq1, seq2, i, j-1, lcs_table))

            lcs_table[i][j] = val
            return val


if __name__ == "__main__":
    """Tests and top-level logic go here."""

    sequence_1 = strgen(['a','b','c'], 100)
    sequence_2 = strgen(['a','b','c'], 100)
    print("seq1: %s" %sequence_1)
    print("seq2: %s" %sequence_2)

    name, elapsed, lcs_length = lcs_memoized(sequence_1, sequence_2)
    recursion_depth = registry['_lcs_memoized']
    print("LCS length: %d" %lcs_length)
    print("name: " + name)
    print("runtime: " + str(elapsed))
    print("recursion_depth: " + str(recursion_depth))

