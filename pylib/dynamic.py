 #!/usr/bin/env python3

"""
dynamic.py

Iterative bottom-up dynamic programming solution to longest common
subsequence problem.

Usage:
    python3 dynamic.py

TODO:
    - add time & space profiling of reconstruct routines

"""

__author__ = "Maksim Yegorov"
__date__ = "2016-04-23 Sat 09:43 PM"

from profilers import len_recursion, time_profiler, registry
from generate_string import strgen

@time_profiler(repeat=1)
def lcs_bottomup(seq1, seq2):
    """Calls helper function to calculate an LCS.

    Args:
        seq1 (string):  a random string sequence generated by
                        generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
    Returns:
        LCS table

    """
    len1 = len(seq1)
    len2 = len(seq2)

    # store length of LCS[i,j] in lcs_table
    lcs_table = [[0 for j in range(len2+1)] \
                    for i in range(len1+1)]
    _lcs_bottomup(seq1, seq2, len1+1, len2+1,
                    lcs_table)
    return lcs_table


def _lcs_bottomup(seq1, seq2, i, j, lcs_table):
    """Iterative bottom-up dynamic programming solution to
    LCS problem. See CLRS p.394.

    Args:
        seq1 (string):  a string sequence generated by
                            generate_string.strgen()
        seq2 (string):  another random string sequence
                            like seq1
        i (int):        number of rows in LCS table
                            (=len(seq1) + 1)
        j (int):        number of columns in LCS table
                            (=len(seq2) + 1)
        lcs_table (2D list):   a matrix of LCS length for
                                [i-1, j-1] prefix
    Returns:
        None:    modifies in place LCS length table
    """

    for row in range(1, i):
        for col in range(1, j):
            if seq1[row-1] == seq2[col-1]:
                lcs_table[row][col] = \
                    lcs_table[row-1][col-1] + 1
            elif lcs_table[row-1][col] \
                    >= lcs_table[row][col-1]:
                lcs_table[row][col] = \
                        lcs_table[row-1][col]
            else:
                lcs_table[row][col] = \
                        lcs_table[row][col-1]
def size_lcs(lcs_table):
    """Returns length of maximum common subsequence.

    Args:
        lcs_table (2D list):   a matrix of LCS length for
                                [i, j] prefix
    Returns:
        length (int):           LCS length
    """
    return lcs_table[-1][-1]


def reconstruct_lcs(lcs_table, lcs_length, seq1, seq2):
    """Calls helper function to reconstruct
    one possible LCS based on saved LCS lengths table.

    Args:
        seq1 (string):  a string sequence generated by
                            generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
        lcs_length (int):   length of LCS
        lcs_table (2D list):   a matrix of LCS length for
                                [i, j] prefix
    Returns:
        lcs (string):   an LCS
    """

    i = len(seq1)
    if i < 1:
        return ""
    else:
        j = len(seq2)
        lcs_arr = _reconstruct_lcs(lcs_table, seq1, seq2,
                lcs_length-1, i, j, [None] * lcs_length)
        lcs = "".join(lcs_arr)
        return lcs


def _reconstruct_lcs(lcs_table, seq1, seq2, char, i, j,\
        lcs_arr):

    # if already done with LCS, return
    if (char < 0 or i < 1 or j < 1):
        return lcs_arr
    # else consider general case
    else:
        prev, up, left = (lcs_table[i-1][j-1],
                            lcs_table[i-1][j],
                            lcs_table[i][j-1])

        if (seq1[i-1] == seq2[j-1]):
            lcs_arr[char] = seq1[i-1]
            return _reconstruct_lcs(lcs_table, seq1, seq2,
                    char-1, i-1, j-1, lcs_arr)
        elif (up >= left):
            return _reconstruct_lcs(lcs_table, seq1,
                    seq2, char, i-1, j, lcs_arr)
        else:
            return _reconstruct_lcs(lcs_table, seq1,
                    seq2, char, i, j-1, lcs_arr)


if __name__ == "__main__":
    """Tests and top-level logic go here."""

    sequence_1 = strgen(['a','b','c'], 100)
    sequence_2 = strgen(['a','b','c'], 100)
    #sequence_1 = "abcbdab"
    #sequence_2 = "bdcaba"
    print("seq1: %s" %sequence_1)
    print("seq2: %s" %sequence_2)

    name, elapsed, lcs_table = \
            lcs_bottomup(sequence_1, sequence_2)
    lcs_length = size_lcs(lcs_table)
    recursion_depth = registry['_lcs_bottomup']
    print("LCS length: %d" %lcs_length)


    #for row in lcs_table:
    #    print(row)
    #print()

    lcs = reconstruct_lcs(lcs_table, lcs_length, sequence_1, sequence_2)
    print("\n(an) LCS: %s" %lcs)
