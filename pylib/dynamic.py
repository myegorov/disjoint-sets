 #!/usr/bin/env python3

"""
dynamic.py

Iterative bottom-up dynamic programming solution to longest common 
subsequence problem.

Usage:
    python3 dynamic.py

"""

__author__ = "Maksim Yegorov"
__date__ = "2016-04-07 Thu 01:00 AM"

from profilers import len_recursion, time_profiler, registry
from generate_string import strgen

@time_profiler(repeat=1)
def lcs_bottomup(seq1, seq2):
    """Calls helper function to calculate an LCS.

    Args:
        seq1 (string):  a random string sequence generated by 
                        generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
    Returns:
        LCS length (int)

    """
    len1 = len(seq1)
    len2 = len(seq2)

    # store length of LCS[i,j] in lcs_table
    lcs_table = [[0 for j in range(len2+1)] \
                    for i in range(len1+1)]
    _lcs_bottomup(seq1, seq2, len1+1, len2+1, 
                    lcs_table)
    return lcs_table[len1][len2]


# @to_profile
def _lcs_bottomup(seq1, seq2, i, j, lcs_table):
    """Iterative bottom-up dynamic programming solution to 
    LCS problem. See CLRS p.394.

    Args:
        seq1 (string):  a string sequence generated by 
                            generate_string.strgen()
        seq2 (string):  another random string sequence 
                            like seq1
        i (int):        number of rows in LCS table 
                            (=len(seq1) + 1)
        j (int):        number of columns in LCS table 
                            (=len(seq2) + 1)
        lcs_table (2D list):   a matrix of LCS length for 
                                [i-1, j-1] prefix
    Returns:
        None:    modifies in place LCS length table
    """

    for row in range(1, i):
        for col in range(1, j):
            if seq1[row-1] == seq2[col-1]:
                lcs_table[row][col] = \
                    lcs_table[row-1][col-1] + 1
            elif lcs_table[row-1][col] \
                    >= lcs_table[row][col-1]:
                lcs_table[row][col] = \
                        lcs_table[row-1][col]
            else:
                lcs_table[row][col] = \
                        lcs_table[row][col-1]


if __name__ == "__main__":
    """Tests and top-level logic go here."""

    sequence_1 = strgen(['a','b','c'], 100)
    sequence_2 = strgen(['a','b','c'], 100)
    print("seq1: %s" %sequence_1)
    print("seq2: %s" %sequence_2)

    name, elapsed, lcs_length = \
            lcs_bottomup(sequence_1, sequence_2)
    recursion_depth = registry['_lcs_bottomup']
    print("LCS length: %d" %lcs_length)

