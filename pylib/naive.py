 #!/usr/bin/env python3

"""
naive.py

Naive recursive solution to longest common subsequence problem.

Usage:
    python3 naive.py

TODO: profiling
"""

__author__ = "Maksim Yegorov"
__date__ = "2016-03-25 Fri 08:46 PM"


# import cProfile
from generate_string import strgen


# def to_profile(func):
#     def profiled_func(*args, **kwargs):
#         profile = cProfile.Profile()
#         try:
#             profile.enable()
#             result = func(*args, **kwargs)
#             profile.disable()
#             return result
#         finally:
#             profile.print_stats()
#     return profiled_func


def lcs_naive(seq1, seq2):
    """Calls helper function to calculate an LCS."""

    return lcs_naive_helper(seq1, seq2, len(seq1)-1, len(seq2)-1, "")


# @to_profile
def lcs_naive_helper(seq1, seq2, i, j, lcs):
    """Naive recursive solution to LCS problem. See CLRS pp.392-393 for
    the recursive formula.

    Args:
        seq1 (string):  a string sequence generated by generate_string.strgen()
        seq2 (string):  another random string sequence like seq1
        i (int):        index into seq1
        j (int):        index into seq2
        lcs (string):   an LCS string being built-up
    Returns:
        lcs:    longest common subsequence (can be empty string)
    """

    if i < 0 or j < 0:
        return lcs
    else:
        if seq1[i] == seq2[j]:
            return lcs_naive_helper(seq1, seq2, i-1, j-1, seq1[i] + lcs)
        else:
            return max(lcs_naive_helper(seq1, seq2, i-1, j, lcs),
                    lcs_naive_helper(seq1, seq2, i, j-1, lcs),
                    key=len)



if __name__ == "__main__":
    """Tests and top-level logic go here."""

    sequence_1 = strgen(['a','b','c'], 100)
    sequence_2 = strgen(['a','b','c'], 100)
    print("seq1: %s" %sequence_1)
    print("seq2: %s" %sequence_2)

    lcs = lcs_naive(sequence_1, sequence_2)
    print("LCS length: %d" %len(lcs))
    print("LCS: %s" %lcs)

