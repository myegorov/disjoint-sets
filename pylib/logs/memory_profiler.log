Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    25     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    26                             def lcs_hirschberg(seq1, seq2):
    27                                 """Calls helper function to calculate an LCS.
    28                             
    29                                 Args:
    30                                     seq1 (string):  a random string sequence generated by
    31                                                     generate_string.strgen()
    32                                     seq2 (string):  another random string sequence like seq1
    33                                 Returns:
    34                                     LCS table
    35                             
    36                                 """
    37     26.7 MiB      0.0 MiB       len1 = len(seq1)
    38     26.7 MiB      0.0 MiB       len2 = len(seq2)
    39                             
    40                                 # for efficiency (see ALG B)
    41                                 # select min(|seq1|, |seq2|) for vector storage
    42     26.7 MiB      0.0 MiB       if len1 < len2:
    43                                     seq1, seq2 = seq2, seq1
    44                                     len1, len2 = len2, len1
    45                             
    46                                 # if only the length of the LCS is required,
    47                                 # the matrix can be reduced to a min(m,n)+1 vector
    48                                 # as the dynamic programming approach only needs the
    49                                 # current and previous columns of the matrix.
    50     26.7 MiB      0.0 MiB       lcs_vector = [0 for j in range(len2+1)]
    51     26.7 MiB      0.0 MiB       _lcs_hirschberg(seq1, seq2, len1+1, len2+1,
    52     26.7 MiB      0.0 MiB                       lcs_vector)
    53     26.7 MiB      0.0 MiB       return lcs_vector


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99                                     return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103     26.7 MiB      0.0 MiB       if m < n:
   104                                     seq1, seq2 = seq2, seq1
   105                                     m, n = n, m
   106                             
   107     26.7 MiB      0.0 MiB       lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109     26.7 MiB      0.0 MiB       lcs = "".join(lcs_arr)
   110     26.7 MiB      0.0 MiB       return lcs


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99     26.7 MiB      0.0 MiB           return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103                                 if m < n:
   104                                     seq1, seq2 = seq2, seq1
   105                                     m, n = n, m
   106                             
   107                                 lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109                                 lcs = "".join(lcs_arr)
   110                                 return lcs


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99     26.7 MiB      0.0 MiB           return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103                                 if m < n:
   104                                     seq1, seq2 = seq2, seq1
   105                                     m, n = n, m
   106                             
   107                                 lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109                                 lcs = "".join(lcs_arr)
   110                                 return lcs


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99     26.7 MiB      0.0 MiB           return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103                                 if m < n:
   104                                     seq1, seq2 = seq2, seq1
   105                                     m, n = n, m
   106                             
   107                                 lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109                                 lcs = "".join(lcs_arr)
   110                                 return lcs


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99                                     return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103     26.7 MiB      0.0 MiB       if m < n:
   104                                     seq1, seq2 = seq2, seq1
   105                                     m, n = n, m
   106                             
   107     26.7 MiB      0.0 MiB       lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109     26.7 MiB      0.0 MiB       lcs = "".join(lcs_arr)
   110     26.7 MiB      0.0 MiB       return lcs


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99                                     return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103     26.7 MiB      0.0 MiB       if m < n:
   104                                     seq1, seq2 = seq2, seq1
   105                                     m, n = n, m
   106                             
   107     26.7 MiB      0.0 MiB       lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109     26.7 MiB      0.0 MiB       lcs = "".join(lcs_arr)
   110     26.7 MiB      0.0 MiB       return lcs


Filename: hirschberg.py

Line #    Mem usage    Increment   Line Contents
================================================
    91     26.7 MiB      0.0 MiB   @time_and_space_profiler(repeat = 1, stream = MEMLOG)
    92                             def algC(seq1, seq2):
    93                                 """Calls helper function to construct LCS."""
    94                             
    95     26.7 MiB      0.0 MiB       m = len(seq1)
    96     26.7 MiB      0.0 MiB       n = len(seq2)
    97                             
    98     26.7 MiB      0.0 MiB       if (m == 0 or n == 0):
    99                                     return ""
   100                             
   101                                 # for efficiency (see ALG B)
   102                                 # select min(|seq1|, |seq2|) for vector storage
   103     26.7 MiB      0.0 MiB       if m < n:
   104     26.7 MiB      0.0 MiB           seq1, seq2 = seq2, seq1
   105     26.7 MiB      0.0 MiB           m, n = n, m
   106                             
   107     26.7 MiB      0.0 MiB       lcs_arr = _algC(m, n, seq1, seq2)
   108                             
   109     26.7 MiB      0.0 MiB       lcs = "".join(lcs_arr)
   110     26.7 MiB      0.0 MiB       return lcs


